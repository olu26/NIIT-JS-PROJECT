This file provides a line-by-line explanation of the code in app.js, which is part of an Expense Tracker App. The app manages budgets, expenses, tags, and displays a pie chart using Chart.js. It interacts with localStorage.js for data persistence.

1: import localStorage from "./localStorage.js";
   - Imports the localStorage module from a local file, allowing access to functions for storing and retrieving data like transactions, budgets, and tags.

2-8: const colors = {
     red: "#F38181",
     green: "#297054b0",
     yellow: "#FCE38A",
     purple: "#8b8dff",
     lightBlue: "#d2dfff",
   };
   - Defines a constant object containing color codes used for styling elements like tags and chart segments.

9: let totalExpData, totalBudgetLeftData;
   - Declares two variables to hold total expense data and remaining budget data, used later for calculations and chart display.

11: const ctx = document.getElementById("myChart");
   - Gets the canvas element with ID "myChart" from the DOM, which will be used to render the pie chart.

12: const budgetLeftEle = document.getElementById("budgetLeft");
   - Gets the element displaying the remaining budget.

13: const totalBudgetEle = document.getElementById("totalBudget");
   - Gets the element displaying the total budget.

14: const totalExpEle = document.getElementById("totalExp");
   - Gets the element displaying the total expenses.

15: const addExpBtnEle = document.querySelector(".add-exp-btn");
   - Selects the button for adding expenses.

16: const addBudBtnEle = document.querySelector(".add-bud-btn");
   - Selects the button for adding budget.

17: const expForSelectEle = document.querySelector(".exp-for");
   - Selects the container for expense categories/tags.

18: const tagContainer = document.querySelector(".tags-conatiner");
   - Selects the container for tag options (note: there's a typo in the class name, should be "container").

19: let allOptionLabel = document.querySelectorAll(".tags-conatiner label");
   - Selects all label elements within the tag container.

20: const addBtnEle = document.getElementById("addBtn");
   - Gets the add button element.

21: const clearBtnEle = document.getElementById("clearBtn");
   - Gets the clear button element.

22: const transAmountEle = document.getElementById("addAmount");
   - Gets the input field for transaction amount.

23: const expForEle = document.querySelectorAll('[name="expFor"]');
   - Selects all radio inputs with name "expFor" for selecting expense tags.

24-26: const transHistoryParentEle = document.querySelector(
     ".money-history-container"
   );
   - Selects the container for displaying transaction history.

27: const mobileAddScreenShowBtn = document.querySelector(".mobile-add-btn");
   - Selects the button to show/hide the add money card on mobile.

28: const moneyAddCardEle = document.querySelector(".add-money-card");
   - Selects the card for adding money/transactions.

29: const addNewTagBtnEle = document.getElementById("addTagBtn");
   - Gets the button to add a new tag.

30: const confirmTagBtnEle = document.getElementById("confirmNewTag");
   - Gets the button to confirm adding a new tag.

31: const tagInputEle = document.querySelector(".tag-input");
   - Selects the input container for new tags.

32: const tagInputField = document.getElementById("tagInputField");
   - Gets the input field for entering new tag names.

33: const sortTransSelectEle = document.getElementById("sortTrans");
   - Gets the select element for sorting transactions.

34: const editCardEle = document.querySelector(".edit-money-card");
   - Selects the card for editing transactions.

35: const editAmountEle = document.getElementById("editAmount");
   - Gets the input for editing transaction amount.

36: const editTagEle = document.getElementById("tagName");
   - Gets the input for editing transaction tag.

37: const editTranBtn = document.getElementById("editTranBtn");
   - Gets the button to confirm editing a transaction.

38: const closeEditCardBtn = document.getElementById("closeEdit");
   - Gets the button to close the edit card.

39: const addAmountCardInfo = document.querySelector(".add-money-card .info");
   - Selects the info element in the add money card for displaying messages.

40: const editCardInfo = document.querySelector(".edit-money-card .info");
   - Selects the info element in the edit card for displaying messages.

42: function totalCalculate() {
   - Defines a function to calculate and update total expenses, remaining budget, and display them.

43:   const allTrans = localStorage.getAllTrans();
   - Retrieves all transactions from localStorage.

44:   let total = 0;
   - Initializes a total variable to 0.

45:   for (let i = 0; i < allTrans.length; i++) {
   - Loops through all transactions.

46:     total += allTrans[i].amount;
   - Adds each transaction amount to the total.

47:   }
   - Ends the loop.

48:   totalExpEle.textContent = `${total}`;
   - Updates the total expense display element.

49:   const leftBudget = Number(localStorage.getTotalBudget()) - total;
   - Calculates remaining budget by subtracting total expenses from total budget.

50:   totalExpData = total;
   - Stores total expenses in the global variable.

51:   totalBudgetLeftData = leftBudget;
   - Stores remaining budget in the global variable.

52:   budgetLeftEle.textContent = `${leftBudget}`;
   - Updates the remaining budget display.

53:   totalBudgetEle.textContent = localStorage.getTotalBudget();
   - Updates the total budget display.

54: }
   - Ends the function.

55: totalCalculate();
   - Calls the function to initialize calculations on load.

57: function showInfo(ele, txt = "") {
   - Defines a function to show info messages in a card.

58:   ele.parentElement.style.display = "flex";
   - Makes the parent element visible.

59:   ele.textContent = txt;
   - Sets the text content of the element.

60: }
   - Ends the function.

61: function hideInfo(ele) {
   - Defines a function to hide info messages.

62:   ele.textContent = "";
   - Clears the text content.

63:   ele.parentElement.style.display = "none";
   - Hides the parent element.

64: }
   - Ends the function.

66: function addBudgetInput() {
   - Defines a function to add or update the budget.

67:   if (transAmountEle.value == "") {
   - Checks if the amount input is empty.

68:     showInfo(addAmountCardInfo, "Please enter budget amount.");
   - Shows an error message.

69:   } else {
   - Otherwise,

70:     localStorage.setTotalBudget(Number(transAmountEle.value));
   - Saves the budget to localStorage.

71:     totalCalculate();
   - Recalculates totals.

72:     hideInfo(addAmountCardInfo);
   - Hides any info message.

73:   }
   - Ends the if-else.

74: }
   - Ends the function.

76: const showBudgetInput = () => {
   - Defines an arrow function to switch to budget input mode.

77:   addExpBtnEle.classList.remove("selected-add-exp");
   - Removes selected class from expense button.

78:   addBudBtnEle.classList.add("selected-add-bud");
   - Adds selected class to budget button.

79:   expForSelectEle.style.display = "none";
   - Hides the expense category selector.

80:   transAmountEle.value = localStorage.getTotalBudget();
   - Pre-fills the input with current budget.

81:   addBtnEle.removeEventListener("click", addTransItem);
   - Removes the expense add listener.

82:   addBtnEle.addEventListener("click", addBudgetInput);
   - Adds the budget add listener.

83: };
   - Ends the function.

85: const showExpInput = () => {
   - Defines an arrow function to switch to expense input mode.

86:   addBudBtnEle.classList.remove("selected-add-bud");
   - Removes selected class from budget button.

87:   addExpBtnEle.classList.add("selected-add-exp");
   - Adds selected class to expense button.

88:   expForSelectEle.style.display = "flex";
   - Shows the expense category selector.

89:   transAmountEle.value = "";
   - Clears the amount input.

90:   addBtnEle.removeEventListener("click", addBudgetInput);
   - Removes the budget add listener.

91:   addBtnEle.addEventListener("click", addTransItem);
   - Adds the expense add listener.

92: };
   - Ends the function.

94: function createTranHTML(obj = {}) {
   - Defines a function to generate HTML for a transaction item.

95:   return `<div class="trans-item" id="${obj?.id}">
   - Returns a template string for the transaction div.

96:   <div>
   - Starts inner div.

97:       <h4>-‚Ç¶${obj?.amount}</h4>
   - Displays the amount with currency.

98:       <div class="tranTagContainer">
   - Container for tag and date.

99:         <p>${obj?.tag}</p>
   - Displays the tag.

100:         <p class="trans-date">${new Date(obj?.time).toLocaleString()}</p>
    - Displays the formatted date.

101:       </div>
    - Ends tag container.

102:   </div>
    - Ends inner div.

103:   <p class="trans-date">${new Date(obj?.time).toLocaleString()}</p>
    - Duplicate date display (possibly for mobile).

104:   <div class="trans-item-btn">
    - Container for edit/delete buttons.

105:       <button id="transEdit"><i class="fa-regular fa-pen-to-square"></i></button>
    - Edit button with icon.

106:       <button id="transDelete"><i class="fa-regular fa-trash-can"></i></button>
    - Delete button with icon.

107:   </div>
    - Ends button container.

108:   </div>`;
    - Ends the template.

109: }
    - Ends the function.

111: localStorage.saveTag("oluüë®‚Äçüíª");
    - Saves a default tag to localStorage.

113: function createTagHTML(str) {
    - Defines a function to generate HTML for a tag option.

114:   return `
    - Returns a template string.

115:   <input type="radio" id="${str}" name="expFor" value="${str}">
    - Radio input for the tag.

116:   <label for="${str}">${str}</label>
    - Label for the radio input.

117:   `;
    - Ends the template.

118: }
    - Ends the function.

120: function renderTags() {
    - Defines a function to render all tags in the UI.

121:   tagContainer.innerHTML = ``;
    - Clears the tag container.

122:   const tagArray = localStorage.getAllTags();
    - Gets all tags from localStorage.

123:   if (tagArray == []) {
    - Checks if tagArray is empty (note: this should be tagArray.length === 0).

124:     return;
    - Returns early if empty.

125:   } else {
    - Otherwise,

126:     tagArray.forEach((tag) => {
    - Loops through each tag.

127:       const tagEle = createTagHTML(tag);
    - Creates HTML for the tag.

128:       tagContainer.insertAdjacentHTML("afterbegin", tagEle);
    - Inserts the HTML at the beginning.

129:     });
    - Ends the loop.

130:   }
    - Ends the if-else.

131:   allOptionLabel = document.querySelectorAll(".exp-for label");
    - Updates the allOptionLabel variable.

132:   allOptionLabel.forEach((label) => {
    - Loops through each label.

133:     label.addEventListener("click", () => {
    - Adds click event listener.

134:       allOptionLabel.forEach((label) => {
    - Loops to reset colors.

135:         label.style.backgroundColor = colors.lightBlue;
    - Sets default color.

136:       });
    - Ends inner loop.

137:       label.style.backgroundColor = colors.yellow;
    - Sets selected color.

138:     });
    - Ends event listener.

139:   });
    - Ends outer loop.

140: }
    - Ends the function.

142: renderTags();
    - Calls the function to render tags on load.

144: function addNewTag() {
    - Defines a function to add a new tag.

145:   const tagValue = tagInputField.value;
    - Gets the value from the input field.

146:   if (tagValue != "") {
    - Checks if value is not empty.

147:     localStorage.saveTag(tagValue);
    - Saves the tag to localStorage.

148:     renderTags();
    - Re-renders the tags.

149:   }
    - Ends if.

150:   tagInputField.value = "";
    - Clears the input field.

151:   tagInputEle.classList.remove("show");
    - Hides the input container.

152: }
    - Ends the function.

154: function renderTransHistory(transArr = []) {
    - Defines a function to render transaction history.

155:   transHistoryParentEle.innerHTML = "";
    - Clears the history container.

156:   if (transArr == []) {
    - Checks if array is empty (should be transArr.length === 0).

157:     return;
    - Returns early.

158:   } else {
    - Otherwise,

159:     transArr.forEach((transObj) => {
    - Loops through transactions.

160:       const transEle = createTranHTML(transObj);
    - Creates HTML for each transaction.

161:       transHistoryParentEle.insertAdjacentHTML("beforeend", transEle);
    - Inserts at the end.

162:     });
    - Ends loop.

163:   }
    - Ends if-else.

164: }
    - Ends the function.

166: renderTransHistory(localStorage.getAllTrans());
    - Calls to render initial transaction history.

168: function showChart(arr = []) {
    - Defines a function to display the pie chart.

169:   new Chart(ctx, {
    - Creates a new Chart.js instance.

170:     type: "pie",
    - Sets chart type to pie.

171:     data: {
    - Defines chart data.

172:       labels: ["Expence", "Buget Left"],
    - Sets labels (note: typo in "Expence").

173:       datasets: [
    - Defines datasets.

174:         {
    - Dataset object.

175:           data: arr,
    - Uses the passed array for data.

176:           backgroundColor: [colors.red, colors.green],
    - Sets colors for slices.

177:           borderWidth: 0,
    - No border.

178:         },
    - Ends dataset.

179:       ],
    - Ends datasets.

180:     },
    - Ends data.

181:     options: {
    - Defines options.

182:       plugins: {
    - Plugin options.

183:         legend: {
    - Legend settings.

184:           display: false,
    - Hides legend.

185:         },
    - Ends legend.

186:       },
    - Ends plugins.

187:     },
    - Ends options.

188:   });
    - Ends Chart constructor.

189: }
    - Ends the function.

191: function findChekedTag(arr) {
    - Defines a function to find the checked tag (note: typo in "Cheked").

192:   let checkedTag = undefined;
    - Initializes variable.

193:   arr.forEach((tag) => {
    - Loops through tags.

194:     if (tag.checked) {
    - Checks if checked.

195:       checkedTag = tag;
    - Sets the checked tag.

196:     }
    - Ends if.

197:   });
    - Ends loop.

198:   return checkedTag;
    - Returns the checked tag.

199: }
    - Ends the function.

201: function addTransItem() {
    - Defines a function to add a new transaction.

202:   const amountEle = document.getElementById("addAmount");
    - Gets amount input (redundant, already have transAmountEle).

203:   const checkedTag = findChekedTag(
    - Finds the checked tag.

204:     Array.from(document.querySelectorAll('[name="expFor"]'))
    - Converts NodeList to array.

205:   );
    - Ends function call.

206:   const amount = amountEle.value;
    - Gets amount value.

207:   const checkedTagValue = checkedTag ? checkedTag.value : undefined;
    - Gets tag value if checked.

208:   if (amount && checkedTagValue && Number(amount) > 0) {
    - Validates inputs.

209:     let transObj = {
    - Creates transaction object.

210:       id: Math.floor(Math.random() * 10000000),
    - Generates random ID.

211:       amount: Number(amount),
    - Amount as number.

212:       tag: checkedTagValue,
    - Tag value.

213:       time: new Date().toISOString(),
    - Current timestamp.

214:     };
    - Ends object.

215:     localStorage.saveTrans(transObj);
    - Saves to localStorage.

216:     renderTransHistory(localStorage.getAllTrans());
    - Re-renders history.

217:     addTranBtnEvent();
    - Re-attaches event listeners.

218:     totalCalculate();
    - Recalculates totals.

219:     hideInfo(addAmountCardInfo);
    - Hides info.

220:   } else {
    - Otherwise,

221:     if (amount == "" || Number(amount) <= 0) {
    - Checks amount.

222:       showInfo(addAmountCardInfo, "Please enter proper amount.");
    - Shows error.

223:     } else if (checkedTagValue == undefined) {
    - Checks tag.

224:       showInfo(addAmountCardInfo, "Please select a tag.");
    - Shows error.

225:     }
    - Ends if-else.

226:   }
    - Ends outer if-else.

227:   amountEle.value = "";
    - Clears amount input.

228:   checkedTag.checked = false;
    - Unchecks the tag.

229:   const checkedLabel = document.querySelector(`[for="${checkedTag.id}"]`);
    - Gets the label.

230:   checkedLabel.style.backgroundColor = colors.lightBlue;
    - Resets label color.

231: }
    - Ends the function.

233: function clearInputForm() {
    - Defines a function to clear the input form.

234:   transAmountEle.value = "";
    - Clears amount.

235:   Array.from(document.querySelectorAll('[name="expFor"]')).forEach((input) => {
    - Loops through radio inputs.

236:     input.checked = false;
    - Unchecks them.

237:   });
    - Ends loop.

238:   document.querySelectorAll(".tags-conatiner label").forEach((label) => {
    - Loops through labels.

239:     label.style.backgroundColor = `${colors.lightBlue}`;
    - Resets colors.

240:   });
    - Ends loop.

241:   hideInfo(addAmountCardInfo);
    - Hides info.

242: }
    - Ends the function.

244: function addTranBtnEvent() {
    - Defines a function to attach event listeners to transaction items.

245:   document.querySelectorAll(".trans-item").forEach((item) => {
    - Loops through items.

246:     item.lastElementChild.lastElementChild.addEventListener("click", () => {
    - Adds delete button listener.

247:       const sure = window.confirm("Are you really wanna delete this?");
    - Confirms deletion.

248:       if (sure) {
    - If confirmed,

249:         localStorage.deleteTrans(item.id);
    - Deletes from localStorage.

250:         renderTransHistory(localStorage.getAllTrans());
    - Re-renders history.

251:         addTranBtnEvent();
    - Re-attaches listeners.

252:         totalCalculate();
    - Recalculates.

253:       }
    - Ends if.

254:     });
    - Ends delete listener.

255:     item.lastElementChild.firstElementChild.addEventListener("click", () => {
    - Adds edit button listener.

256:       const tranObj = localStorage.findTran(item.id);
    - Finds the transaction.

257:       editAmountEle.value = "";
    - Clears edit amount.

258:       editTagEle.value = "";
    - Clears edit tag.

259:       editCardEle.style.display = "flex";
    - Shows edit card.

260:       editAmountEle.value = tranObj?.amount;
    - Pre-fills amount.

261:       editTagEle.value = tranObj?.tag;
    - Pre-fills tag.

262:       editCardEle.id = tranObj?.id;
    - Sets ID on edit card.

263:     });
    - Ends edit listener.

264:   });
    - Ends loop.

265: }
    - Ends the function.

267: function editTran() {
    - Defines a function to edit a transaction.

268:   if (
    - Checks conditions.

269:     editAmountEle.value != "" &&
    - Amount not empty.

270:     Number(editAmountEle.value) > 0 &&
    - Amount positive.

271:     editTagEle.value != ""
    - Tag not empty.

272:   ) {
    - Ends if condition.

273:     const transObj = {
    - Creates updated object.

274:       id: Number(editCardEle.id),
    - Uses the ID.

275:       amount: Number(editAmountEle.value),
    - New amount.

276:       tag: editTagEle.value,
    - New tag.

277:     };
    - Ends object.

278:     localStorage.saveTrans(transObj);
    - Saves updated transaction.

279:     renderTransHistory(localStorage.getAllTrans());
    - Re-renders.

280:     addTranBtnEvent();
    - Re-attaches.

281:     totalCalculate();
    - Recalculates.

282:     editAmountEle.value = "";
    - Clears.

283:     editTagEle.value = "";
    - Clears.

284:     hideInfo(editCardInfo);
    - Hides info.

285:   } else {
    - Otherwise,

286:     showInfo(editCardInfo, "Please enter proper value.");
    - Shows error.

287:   }
    - Ends if-else.

288:   editCardEle.style.display = "none";
    - Hides edit card.

289: }
    - Ends the function.

291: const sortTransHelper = (arr = [], sortTypeNum) => {
    - Defines a helper function for sorting transactions.

292:   let sortedArray;
    - Initializes sorted array.

293:   if (sortTypeNum == 1) {
    - If sortTypeNum is 1 (high to low).

294:     sortedArray = arr.sort((trans1, trans2) => {
    - Sorts descending.

295:       if (trans1?.amount > trans2?.amount) {
    - Compares amounts.

296:         return -1;
    - Returns for descending.

297:       } else if (trans1?.amount < trans2?.amount) {
    - Else.

298:         return 1;
    - Returns for descending.

299:       } else {
    - Equal.

300:         return 0;
    - No change.

301:       }
    - Ends if-else.

302:     });
    - Ends sort.

303:   } else if (sortTypeNum == -1) {
    - If sortTypeNum is -1 (low to high).

304:     sortedArray = arr.sort((trans1, trans2) => {
    - Sorts ascending.

305:       if (trans1?.amount > trans2?.amount) {
    - Compares.

306:         return 1;
    - Returns for ascending.

307:       } else if (trans1?.amount < trans2?.amount) {
    - Else.

308:         return -1;
    - Returns for ascending.

309:       } else {
    - Equal.

310:         return 0;
    - No change.

311:       }
    - Ends if-else.

312:     });
    - Ends sort.

313:   }
    - Ends if-else.

314:   return sortedArray;
    - Returns sorted array.

315: };
    - Ends function.

317: function sortTrans(e) {
    - Defines a function to handle sorting.

318:   const sortType = e.target.value;
    - Gets the selected sort type.

319:   switch (sortType) {
    - Switch on sort type.

320:     case "highToLow":
    - High to low.

321:       renderTransHistory(sortTransHelper(localStorage.getAllTrans(), 1));
    - Renders sorted.

322:       addTranBtnEvent();
    - Attaches listeners.

323:       break;
    - Breaks.

324:     case "lowToHigh":
    - Low to high.

325:       renderTransHistory(sortTransHelper(localStorage.getAllTrans(), -1));
    - Renders sorted.

326:       addTranBtnEvent();
    - Attaches.

327:       break;
    - Breaks.

328:     default:
    - Default (no sort).

329:       renderTransHistory(localStorage.getAllTrans());
    - Renders unsorted.

330:       addTranBtnEvent();
    - Attaches.

331:       break;
    - Breaks.

332:   }
    - Ends switch.

333: }
    - Ends function.

335: mobileAddScreenShowBtn.addEventListener("click", (e) => {
    - Adds listener to mobile add button.

336:   moneyAddCardEle.classList.toggle("show");
    - Toggles show class on card.

337:   mobileAddScreenShowBtn.children[0].classList.toggle("rotatePlus");
    - Toggles rotate class on icon.

338: });
    - Ends listener.

339: closeEditCardBtn.addEventListener("click", () => {
    - Adds listener to close edit button.

340:   editCardEle.style.display = "none";
    - Hides edit card.

341:   hideInfo(editCardInfo);
    - Hides info.

342: });
    - Ends listener.

343: editTranBtn.addEventListener("click", editTran);
    - Adds listener to edit transaction button.

344: addBudBtnEle.addEventListener("click", showBudgetInput);
    - Adds listener to add budget button.

345: addExpBtnEle.addEventListener("click", showExpInput);
    - Adds listener to add expense button.

346: addBtnEle.addEventListener("click", addTransItem);
    - Adds listener to add button.

347: clearBtnEle.addEventListener("click", clearInputForm);
    - Adds listener to clear button.

348: addNewTagBtnEle.addEventListener("click", () => {
    - Adds listener to add new tag button.

349:   tagInputEle.classList.toggle("show");
    - Toggles show class on input.

350: });
    - Ends listener.

351: confirmTagBtnEle.addEventListener("click", addNewTag);
    - Adds listener to confirm tag button.

352: sortTransSelectEle.addEventListener("change", sortTrans);
    - Adds listener to sort select.

354: addTranBtnEvent();
    - Attaches initial event listeners to transactions.

355: showChart([totalExpData, totalBudgetLeftData >= 0 ? totalBudgetLeftData : 0]);
    - Initializes the pie chart with expense and remaining budget data (ensures non-negative for chart).
